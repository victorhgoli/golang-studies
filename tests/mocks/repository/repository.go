// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/contract.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	models "estudo-test/pkg/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPedidoRepository is a mock of PedidoRepository interface.
type MockPedidoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPedidoRepositoryMockRecorder
}

// MockPedidoRepositoryMockRecorder is the mock recorder for MockPedidoRepository.
type MockPedidoRepositoryMockRecorder struct {
	mock *MockPedidoRepository
}

// NewMockPedidoRepository creates a new mock instance.
func NewMockPedidoRepository(ctrl *gomock.Controller) *MockPedidoRepository {
	mock := &MockPedidoRepository{ctrl: ctrl}
	mock.recorder = &MockPedidoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPedidoRepository) EXPECT() *MockPedidoRepositoryMockRecorder {
	return m.recorder
}

// InsertPedido mocks base method.
func (m *MockPedidoRepository) InsertPedido(user *models.Pedido) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPedido", user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertPedido indicates an expected call of InsertPedido.
func (mr *MockPedidoRepositoryMockRecorder) InsertPedido(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPedido", reflect.TypeOf((*MockPedidoRepository)(nil).InsertPedido), user)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// GetUserById mocks base method.
func (m *MockUserRepository) GetUserById(id int64) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserRepositoryMockRecorder) GetUserById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserRepository)(nil).GetUserById), id)
}

// InsertUser mocks base method.
func (m *MockUserRepository) InsertUser(user *models.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockUserRepositoryMockRecorder) InsertUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserRepository)(nil).InsertUser), user)
}
